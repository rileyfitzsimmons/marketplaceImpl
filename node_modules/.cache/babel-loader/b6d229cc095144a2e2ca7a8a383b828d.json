{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useEffect, useState } from \"react\";\nimport { useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\nimport { useIPFS } from \"./useIPFS\";\nexport const useNFTTokenIds = addrs => {\n  _s();\n\n  const {\n    token\n  } = useMoralisWeb3Api();\n  const {\n    chainId\n  } = useMoralisDapp();\n  const {\n    resolveLink\n  } = useIPFS();\n  const [NFTTokenIds, setNFTTokenIds] = useState([]);\n  const {\n    fetch: getNFTTokenIds,\n    data,\n    error,\n    isLoading\n  } = useMoralisWeb3ApiCall(token.getAllTokenIds, {\n    chain: chainId,\n    address: addrs\n  });\n  useEffect(() => {\n    if (data === null || data === void 0 ? void 0 : data.result) {\n      const NFTs = data.result;\n\n      for (let NFT of NFTs) {\n        if (NFT === null || NFT === void 0 ? void 0 : NFT.metadata) {\n          var _NFT$metadata;\n\n          NFT.metadata = JSON.parse(NFT.metadata); // metadata is a string type\n\n          NFT.image = resolveLink((_NFT$metadata = NFT.metadata) === null || _NFT$metadata === void 0 ? void 0 : _NFT$metadata.image);\n        }\n      }\n\n      setNFTTokenIds(NFTs);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [data]);\n  return {\n    getNFTTokenIds,\n    NFTTokenIds,\n    error,\n    isLoading\n  };\n};\n\n_s(useNFTTokenIds, \"AyB4IJy6YGBeP3r4LeCoEeOXMw8=\", false, function () {\n  return [useMoralisWeb3Api, useMoralisDapp, useIPFS, useMoralisWeb3ApiCall];\n});","map":{"version":3,"sources":["/Users/rileyfitzsimmons/Downloads/nftMarketplace/ethereum-boilerplate/src/hooks/useNFTTokenIds.js"],"names":["useMoralisDapp","useEffect","useState","useMoralisWeb3Api","useMoralisWeb3ApiCall","useIPFS","useNFTTokenIds","addrs","token","chainId","resolveLink","NFTTokenIds","setNFTTokenIds","fetch","getNFTTokenIds","data","error","isLoading","getAllTokenIds","chain","address","result","NFTs","NFT","metadata","JSON","parse","image"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,mDAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,eAAzD;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAYL,iBAAiB,EAAnC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAcT,cAAc,EAAlC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBL,OAAO,EAA/B;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AACJW,IAAAA,KAAK,EAAEC,cADH;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFb,qBAAqB,CAACI,KAAK,CAACU,cAAP,EAAuB;AAC9CC,IAAAA,KAAK,EAAEV,OADuC;AAE9CW,IAAAA,OAAO,EAAEb;AAFqC,GAAvB,CALzB;AAUAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEM,MAAV,EAAkB;AAChB,YAAMC,IAAI,GAAGP,IAAI,CAACM,MAAlB;;AACA,WAAK,IAAIE,GAAT,IAAgBD,IAAhB,EAAsB;AACpB,YAAIC,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEC,QAAT,EAAmB;AAAA;;AACjBD,UAAAA,GAAG,CAACC,QAAJ,GAAeC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACC,QAAf,CAAf,CADiB,CAEjB;;AACAD,UAAAA,GAAG,CAACI,KAAJ,GAAYjB,WAAW,kBAACa,GAAG,CAACC,QAAL,kDAAC,cAAcG,KAAf,CAAvB;AACD;AACF;;AACDf,MAAAA,cAAc,CAACU,IAAD,CAAd;AACD,KAXa,CAYd;;AACD,GAbQ,EAaN,CAACP,IAAD,CAbM,CAAT;AAeA,SAAO;AAAED,IAAAA,cAAF;AAAkBH,IAAAA,WAAlB;AAA+BK,IAAAA,KAA/B;AAAsCC,IAAAA;AAAtC,GAAP;AACD,CA/BM;;GAAMX,c;UACOH,iB,EACEH,c,EACIK,O,EAOpBD,qB","sourcesContent":["import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\r\nimport { useIPFS } from \"./useIPFS\";\r\n\r\nexport const useNFTTokenIds = (addrs) => {\r\n  const { token } = useMoralisWeb3Api();\r\n  const { chainId } = useMoralisDapp();\r\n  const { resolveLink } = useIPFS();\r\n  const [NFTTokenIds, setNFTTokenIds] = useState([]);\r\n  const {\r\n    fetch: getNFTTokenIds,\r\n    data,\r\n    error,\r\n    isLoading,\r\n  } = useMoralisWeb3ApiCall(token.getAllTokenIds, {\r\n    chain: chainId,\r\n    address: addrs,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data?.result) {\r\n      const NFTs = data.result;\r\n      for (let NFT of NFTs) {\r\n        if (NFT?.metadata) {\r\n          NFT.metadata = JSON.parse(NFT.metadata);\r\n          // metadata is a string type\r\n          NFT.image = resolveLink(NFT.metadata?.image);\r\n        }\r\n      }\r\n      setNFTTokenIds(NFTs);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  return { getNFTTokenIds, NFTTokenIds, error, isLoading };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}